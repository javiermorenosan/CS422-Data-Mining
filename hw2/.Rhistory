adultTrain.df <- read.csv("adult-train.csv", header=T, sep=",")
adultTrain.df <- read.csv("adult-train.csv", header=T, sep=",")
adultTest.df <- read.csv("adult-test.csv", header=T, sep=",")
set.seed(1122)
indexes <- which(adultTrain.df$workclass=="?")
adultTrain.df <- adultTrain.df[-indexes, ]
indexes <- which(adultTrain.df$occupation=="?")
adultTrain.df <- adultTrain.df[-indexes, ]
indexes <- which(adultTrain.df$native_country=="?")
adultTrain.df <- adultTrain.df[-indexes, ]
indexes <- which(adultTest.df$workclass=="?")
adultTest.df <- adultTest.df[-indexes, ]
indexes <- which(adultTest.df$occupation=="?")
adultTest.df <- adultTest.df[-indexes, ]
indexes <- which(adultTest.df$native_country=="?")
adultTest.df <- adultTest.df[-indexes, ]
modelRF <- randomForest(income ~ ., data=adultTrain.df, importance = T)
library(randomForest)
install.packages("randomForest")
(randomForest)
library(randomForest)
library(rpart.plot)
library(ROCR)
library(randomForest)
install.packages("randomForest")
library(randomForest)
rm(list=ls())
setwd("/Users/JavierMoreno/Desktop/Chicago/courses/CS422 Data Mining/hw2")
library(rpart)
library(caret)
library(caret)
library(rpart.plot)
library(ROCR)
library(randomForest)
install.packages("randomForest")
library(randomForest)
library(randomForest)
rm(list=ls())
setwd("/Users/JavierMoreno/Desktop/Chicago/courses/CS422 Data Mining/hw2")
adultTrain.df <- read.csv("adult-train.csv", header=T, sep=",")
adultTest.df <- read.csv("adult-test.csv", header=T, sep=",")
set.seed(1122)
indexes <- which(adultTrain.df$workclass=="?")
adultTrain.df <- adultTrain.df[-indexes, ]
indexes <- which(adultTrain.df$occupation=="?")
adultTrain.df <- adultTrain.df[-indexes, ]
indexes <- which(adultTrain.df$native_country=="?")
adultTrain.df <- adultTrain.df[-indexes, ]
indexes <- which(adultTest.df$workclass=="?")
adultTest.df <- adultTest.df[-indexes, ]
indexes <- which(adultTest.df$occupation=="?")
adultTest.df <- adultTest.df[-indexes, ]
indexes <- which(adultTest.df$native_country=="?")
adultTest.df <- adultTest.df[-indexes, ]
modelRF <- randomForest(income ~ ., data=adultTrain.df, importance = T)
modelRF <- randomForest(income ~ ., data=adultTrain.df, importance = T, mtry = 6)
modelRF <- randomForest(income ~ ., data=adultTrain.df, importance = T)
pred <- predict(modelRF, adultTest.df, type="class")
confusionMatrix(pred, as.factor(adultTest.df$income))
print(model)
print(modelRF)
varImpPlot(model)
varImpPlot(modelRF)
mtry <- tuneRF(X, Y, ntreeTry=500, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
mtry <- tuneRF(adultTrain.df - adultTrain.df$income, adultTrain.df$income, ntreeTry=500, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
mtry <- tuneRF(select(adultTrain.df, age, workclass, fnlwgt, education, education_num, marital_status, occupation, relationship, race, sex, capita_gain, capital_loss, hours_per_week, native_country), adultTrain.df$income, ntreeTry=500, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
library(dplyr)
mtry <- tuneRF(select(adultTrain.df, age, workclass, fnlwgt, education, education_num, marital_status, occupation, relationship, race, sex, capita_gain, capital_loss, hours_per_week, native_country), adultTrain.df$income, ntreeTry=500, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
mtry <- tuneRF(select(adultTrain.df, age, workclass, fnlwgt, education, education_num, marital_status, occupation, relationship, race, sex, capital_gain, capital_loss, hours_per_week, native_country), adultTrain.df$income, ntreeTry=500, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
print(mtry)
mtry <- tuneRF(select(adultTrain.df, age, workclass, fnlwgt, education, education_num, marital_status, occupation, relationship, race, sex, capital_gain, capital_loss, hours_per_week, native_country), adultTrain.df$income, ntreeTry=500, stepFactor=1.5,improve=0.01, trace=TRUE, plot=TRUE)
print(mtry)
modelRFOptimal <- randomForest(income ~ ., data=adultTrain.df, importance = T, mtry = 2)
modelRFOptimal <- randomForest(income ~ ., data=adultTrain.df, importance = T, mtry = 2)
pred2 <- predict(modelRFOptimal, adultTest.df, type="class")
confusionMatrix(pred, as.factor(adultTest.df$income))
varImpPlot(modelRFOptimal)
modelRFOptimal <- randomForest(income ~ ., data=adultTrain.df, importance = T, mtry = 2)
sad
dssddfs
;
pred2 <- predict(modelRFOptimal, adultTest.df, type="class")
confusionMatrix(pred2, as.factor(adultTest.df$income))
varImpPlot(modelRFOptimal)
